## 关于写书的动机：
我想写一些东西很久了，断断续续，一直没有下定决心。
加上前些年去一些一线互联网大厂面试，常常被一面直接淘汰，自信心很受打击。我甚至一度怀疑自己算不算一名优秀的程序员（我一直觉得自己是），害怕自己的一些想法仅仅是自娱自乐，写的东西如果误人子弟可就罪过了。这些想法导致我迟迟不敢下笔。<br>
2022年年初与一个业内朋友交谈。朋友提到他们公司新来的一个资深架构师，没怎么写过代码，以前是做销售的，只是对很多热点技术和三方组件特别熟悉，但沟通能力很强，被领导特别器重。
聊完两人唏嘘感叹，如今的软件行业好像变了一些味道：

+ 一个粗制滥造的软件，只要能跑，就可以上线了，没人会关心里面的代码有多糟糕，提前占领市场比什么都重要；
+ 一个优秀的程序员，在35岁正是写代码的黄金年龄，会开始考虑转岗了，要么做管理，要么当产品经理或者什么其他都好，只要不写代码就行；
+ 一个好的架构师，好像也不用特别懂代码或者懂设计，只需要了解足够多的三方件，拿来拼就行，写PPT时还能贴上一堆开源社区的架构图和热点概念。

<br>
软件更多的是作为产品赚钱的工具，而不是产品的基座。
软件的基本功好像不再重要，行业在**挣快钱**，程序员也开始变得浮躁。

- 国内的麦思博和架构师峰会等等交流很难再看到讲软件设计和讲基本功的课程，更多的是教别人如何使用一些新的三方件，如何使用k8s，或者是一些新概念或热点技术；
- 不管哪个公司的面试官，开口闭口都是开源件怎么用，redis有几种数据类型，kafka是什么原理；如果哪一天工具更新换代了我们还能剩下些什么？

<br>

**似乎我们总是在学着使用别人的工具，刚学完总是会有更新的工具出现。**
我时常在想，国内的基础软件不如别人，是不是正因为我们缺少优秀的软件程序员，而这个结果是不是又正是我们自己一手造成的氛围所致？
我不知道这种因果关系是否存在，但不可否认的是，我们身边确实很少看到超过40岁仍然对编码充满激情的优秀程序员，即使有，也是被暗地里嘲笑的“可怜虫”。

作为一名"高龄"码农，对于自己所热爱的事业，我觉得我应该写点东西，不管对错，也不去care别人的看法，只是去思考应该如何好好coding，然后写下来并享受这个过程。
如果这些文字还能影响到一些读者，坚定他们对编码的热爱和信心，岂不是善莫大焉。


## 关于本书
这是一本关于如何通过软件设计写出优秀代码的书籍。
本书主要通过剖析SOLID五大设计原则和23种设计模式来说明什么是好代码以及如何编写好代码。市面上对设计模式和原则二次解读的书籍和文章其实已经非常繁多，本书也是其中之一，但不同的是，笔者并非一名摇旗助威者，而是通过批判性的角度来看待业内一直所吹捧的设计模式和原则。<br>
本书存在很多关于经典设计原则和23种设计模式的质疑，甚至是全盘否定；对于软件设计的理解，也存在与很多大众的理解背道而驰的地方（笔者查阅了大量关于设计原则和设计模式的博客，对于其中的讲解方式，重点以及作者自身的理解大都不太认同）。
这并不是想证明笔者格外“出类拔萃”，亦或是“与众不同”，这只是一个码农对软件设计发自内心的思考：<br>
开闭原则明显需要靠其他原则实现，而单一职责原则又明显包含接口隔离原则；设计原则的定义就已经存在重叠和包含关系（不满足MECE原则），这注定SOLID原则不可能代表软件设计的核心和本质。
某些设计模式的代码如此雷同，明明是同一问题的不同表象，却要被定义成两种模式；而有些设计模式甚至完全与设计无关，放在其中不伦不类，却也被作为“设计模式”之一。
> MECE分析法，全称 Mutually Exclusive Collectively Exhaustive，中文意思是"相互独立，完全穷尽"。具体意思是指能够将一个重要的议题分成若干个分类，这些分类之间没有重叠、没有遗漏，并且能够捕捉到问题的核心，并从中得到有效解决问题的方法。

<br>
我想，对经典理论的质疑和补充才是对原作者最大的尊敬。
关于本书的观点，各位读者如果有不同意见尽可以保留。但这些不同意见我希望不是因为“设计原则”和“设计模式”久负盛名的权威，而是真正经过了发自内心的思考而得出的结论。
<br><br>

**没有思考，只会沦落为设计原则和设计模式的复述者。**

## 关于读者
我希望你了解过23种设计模式和设计原则，否则可能阅读起来稍显困难和难以理解。
另外，我希望你有一些面向对象语言的基础，最好是java，因为本书所有的例子都是采用java编写。

## 关于作者
热爱编码，一直编码从未停歇的平凡码农。
