单一职责原则是面向对象设计原则中最重要也最难理解的原则。


**单一职责原则（Single Responsibility Principle,SRP）**：一个类应该只有一个变化因子。

单一职责原则的定义其实过于狭隘和保守，这个原则的作用范围远不止“类”，我们可以稍微改下：
**单一职责原则（Single Responsibility Principle,SRP）**：任何软件组成单元都应该只有一个变化因子。
单一职责原则的适用范围甚至不仅仅是软件行业，它几乎可以应用在我们从事生产活动的各行各业。

### 1. 什么是一
- 一篇复杂的论文，可以分为若干章，每一章再分为若干节，每一节又分为若干段，再由最基本的一句话，一个字组成；
- 一个国家，需要先分成一个一个省，再分成一个一个市，然后是区县，乡镇，村/街道，最后才是一个一个具体家庭和自然人；

> 这种金字塔式的递归划分方式主宰着整个人类社会：公司的组织结构，数字（个十百千万），时间（秒分时天月年）都是如此。

可见，“**一**”是一个相对的概念，可大可小。对于王健林来说，赚一个亿是一件小事；而对于一名家庭主妇而言，一日三餐却是每天最重要的三件大事；脱离了**层次**谈“**一**”毫无意义。

> 关于**层次**，可以参看**2.1 抽象**中关于层次的定义。

一个大型软件系统要分成多个系统，一个系统要分成多个服务或模块，如果有需要会再划分为多个子模块，最后是一个个包，类和函数。
每个设计师都知道该如此划分，但难的是如何在合适的层级拆分出一个一个合理的“**一**”。
同一个软件产品，一千个设计师会有一千种分法，最终的好坏，与设计师本人的水平和经验，以及设计师对业务本身的理解和熟悉程度都息息相关。再加上软件需求的“动态变化”，导致这种拆分会更加困难。

### 2. 变化因子
递归拆解的方式并非面向对象软件设计的专利，面向过程设计也会将复杂的模块分解成一个一个更小的模块，然后复用其中一些函数或模块。面向过程与面向对象设计的本质区别其实在于**如何拆**，这种拆的方式会最终影响到软件的可复用性。

举个例子，假设下面这幅画是一幅“巨著”，工作量巨大，我们需要将它分配给四个“画家”协作进行完成，该如何划分？
![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116184006176.png)

一种最简单粗暴的分法方式一：水平垂直各砍一刀，平分为四块，每人各画一部分。

![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116195031986.png)

还有一种分法方式二：按照元素来分。
一人画天空：

![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116195221968.png)

一人画大山：

![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116195317146.png)

一人画树林：

![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116195350093.png)

最后一个设计签名：

![](C:\Users\A\Desktop\Design-Pattern-main\image\image-20211116195405296.png)

如果仅仅是完成这幅画，两种方式工作量其实差距不大。但后续如果需要修改这幅画，两种方式区别就大了。
- 比如要修改白云的颜色，会发现画家一和画家二都需要改动，而且工作比较雷同；
- 如果是修改大山，四个画家甚都要修改而且还要对齐边界，否则最后拼不起来可就麻烦了；
- 又或者突然哪天又要新作一幅画，要求有同样的logo，那么方式二可以直接把签名拿去复用，但方式一就很难抠出来了；

这个例子中，方式一类比的是面向过程式的设计，方式二则是面向对象式的设计。前者极难复用，发生变更时与周边模块耦合严重，很多逻辑也不够聚集，项目一旦庞大会变得复杂无比；后者复用性强，各模块互不影响，可各自扩展。

在项目足够小而且简单的情况下（比如一个简单的编程算法题），面向过程的工作量可能会更小，开发速度更快；而面向对象或多或少会有一些冗余工作（比如有一部分太阳会被大山遮挡，其实可以不画），但是一旦项目相对稍大的时候，由于面向对象的逻辑相关性和可复用性，会导致最终的开发难度、维护难度和总工作量都会远小于前者；


这种面向对象划分边界的依据，便是单一职责原则所说的“变化因子”。变化因子的概念不难理解，但是寻找变化因子却是一件相当困难的事。
真实的软件系统并不会有如此明确清晰的“边界”，一个功能应该放在哪个模块、抑或是一个函数应该放在哪个类，往往都能让人陷入两难的境地；大多数情况都需要充分沟通和长时间的分析才能得出一些结论，**而且越到细节处，这些“变化因子”越难以寻找**。

比如下面这个例子：
```
public interface Fish {
    void swim();

    void layEggs();
}
```
鱼有游泳和产卵两个功能，所以我写了一个鱼的接口类定义。如果不讲上下文，我们很难定义这个接口是否满足单一职责原则。比如整个系统只涉及到基本的鱼类，那么这个接口是没问题的（满足单一职责原则，影响这个接口的只有一个变化因子，就是鱼类的行为）；但如果这个系统是管理海洋动物的，那么这个接口就不行了：比如鲍鱼产卵，但是不会游泳；海豚会游泳，却不会产卵。此时这个接口就做了两件事，需要分开。

“变化因子”往往需要结合业务才能分辨，而且由于业务的易变性，“变化因子”也会跟着动态变化，这也是我们的代码需要跟随业务的变化持续重构的原因。否则即使拆解的无论多么完美的“一”，也会随着时间慢慢变得不正确。


### 3. “谁”在违反单一职责原则

我们再来讨论一个有趣的问题，假定有一段非常完美的代码，他的每个函数都拆解的恰到好处，具体如下：
```
// 方式一
public void putElephant2Fridge() {
    openFridgeDoor();
    putElephant();
    closeFridgeDoor();
}

private openFridgeDoor() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...
}

private putElephant() {
    // put elephant start ...
    // some code
    // put elephant end   ...
}

private closeFridgeDoor() {
    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```
如果我们把putElephant和closeFridgeDoor的逻辑写在了一个函数中，变成了这样：
```
// 方式二
public void putElephant2Fridge() {
    openFridgeDoor();
    putElephantAndClose();
}

private openFridgeDoor() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...
}

private putElephantAndClose() {
    // put elephant start ...
    // some code
    // put elephant end   ...

    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```
如果方式一是最完美的写法，即每个函数刚好只做了“一件事”，那么方式二一定多多少少违反了单一职责原则。
如果问是哪个函数违反了单一职责原则，大多数人的回答会是putElephantAndClose这个函数，因为它做了两件事。

但是当我们把putElephant2Fridge函数改成这样：把开冰箱门，放大像和关冰箱门的逻辑直接平铺到putElephant2Fridge函数中。
```
// 方式三
public void putElephant2Fridge() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...

    // put elephant start ...
    // some code
    // put elephant end   ...

    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```
这时候我们再问方式三谁违反了单一职责原则，大概率答案会是putElephant2Fridge函数，原因是它一个人做了三件事。

我分开问了多个同事，均非常一致的认为：方式二违反单一的是putElephantAndClose函数，方式三违反单一的是putElephant2Fridge函数。当我问到方式二putElephant2Fridge函数有没有违反单一，他们给出的答案都是**没有**！
> 读者们不妨细细思考下，自己心中的答案是什么？

仔细思考上面的结论，会发现一些问题：putElephant2Fridge函数要完成把大象放冰箱的功能，无论方式一，方式二还是方式三，putElephant2Fridge函数对调用者来说做的事情都是一模一样的，没有多也没有少；只不过区别在于，它把所要做的事情，是分给三个子函数做、两个子函数做，或者自己一个人全部做完而已。
既然都是分配不当，为什么方式三的责任主体在putElephant2Fridge函数，而方式二的责任主体又变成下级的putElephantAndClose函数了呢？

**单一职责原则**有一种比较广泛的理解是：一个类或函数只做一件事。
这其实很像一个大领导，把一个比较大的项目交给一个小领导，如果以结果为导向的话，只要这个小领导把项目搞定了，就算成功。至于这个小领导是把所有的事情自己一个人全干了，还是如何内部再分工，对大领导来说都不太关心。从这个角度看，putElephant2Fridge函数好像没有违反单一职责原则。

而实际上是，将所有的事情一个人扛，或者把过多的事情分给一个下属都是一种管理失职。

所以：无论是方式二还是方式三，putElephant2Fridge都有违反单一职责原则；方式二中putElephantAndClose函数被分配了过多的任务，也违反了单一职责原则，同样需要整改。

按照单一职责原则的理解，我们再来梳理下，各个函数真正应该做的“**一件事**”是什么：
- putElephant2Fridge函数：协调好openFridgeDoor，putElephant，closeFridgeDoor三个函数的调用关系和顺序；
- openFridgeDoor函数：做好开冰箱门这件事；
- putElephant函数：做好放大象这件事；
- closeFridgeDoor函数：做好关冰箱门这件事；

> 很明显，putElephant2Fridge函数做的事情应该比三个子函数要高一个层级
> 一个上层函数应该剥离下层业务的细节，和一个抽象的定义应该剥离具体的个性一样，两者的思想如出一辙，都是为了实现可复用。

那么，最终的判决如下
方式二中违反单一职责的有两个函数：
putElephant2Fridge函数：给下级putElephantAndClose函数分配了过多的任务；
putElephantAndClose函数：被分配了过多的事情，应该将部分事情丢给上级重新分配

> 如果仅仅认为putElephantAndClose函数做了过多的事情，我们很可能把代码修改为：
> ```
> public void putElephant2Fridge() {
>     openFridgeDoor();
>     putElephantAndClose();
> }
>
> private openFridgeDoor() {
>     // open the fridge door start ...
>     // some code
>     // open the fridge door end   ...
> }
>
> private void putElephantAndClose() {
>     // put elephant start ...
>     // some code
>     // put elephant end   ...
>     closeFridgeDoor();
> }
>
> private closeFridgeDoor() {
>     // close the fridge door start ...
>     // some code
>     // close the fridge door end   ...
> }
> ```
> 而这，依然是一种错误的方式，所以putElephant2Fridge无论如何也逃脱不了干系。

方式三违反单一职责的有一个函数：
putElephant2Fridge函数：一个人不仅做了开门，放大象，关门三件事情，还承担三件事情的调用关系和协调工作；

> 这种揉成一团的方式是造成耦合的罪魁祸首


从这个例子还可以看出，我们违反单一职责原则最基本的两种方式：
1. 做多了或做少了（针对同一层级）；
2. 越级（关注了自己不该关注的细节）；



违反单一职责原则后，往往都会引起周边模块的变动：
- 一个函数违反单一，需要整改整个类，可能要重新规划所有函数；
- 一个类违反单一，需要整改整个模块，需要重新规划类；
- 而一个模块违反单一，则有可能引起整个系统重构。

这也是单一职责原则如此重要的主要原因。

> 系统一旦划分错误或者不合理，比如应该划分在模块A的功能特性，实际上分到了B模块，后期想再纠正这个错误，会发现多个模块需要联动（不同的模块或子系统往往属于不同的部门，协调和沟通都相对困难），代价会十分昂贵。但是只要划分合理，最坏的结果也只是模块内部协调而已。这也是本书一直强调"分"的重要性（也就是单一职责原则的重要性）的原因。


### 4. 函数应拆分到什么粒度？

一个系统要不要拆成多个服务，或者一个服务要不要拆成多个模块，往往很少会产生分歧，因为单台服务器的硬件瓶颈，团队的人员规模等客观条件会逼迫你不得不进行拆分。具体如何拆分，上面已经讨论过，通过识别“变化因子”来作为拆分的边界。但是当拆到很细节之处，“变化因子”会越来越模糊，比如常见的：**一个函数，有没有必须要再拆成几个子函数？**

如果你仍能清楚的看到未来的发展方向，找到其中的分割界限，那么该如何拆分，便如何拆分，这与函数的代码规模没有任何关系，即使只有两行，该拆还是得拆。但如果变化因子非常模糊（你不知道该拆还是不该拆）的时候，可以通过以下两个因素来决定是否拆分：

#### 1. 复杂
亚马逊有一个非常著名的“两个披萨团队”理论，即把团队拆解成两个披萨刚好够吃的规模，大概就是6~8人的样子。同样相似的还有美国心理学家 George A. Miller 1956年发布的论文《神奇的数字7加减2：我们加工信息能力的某些限制》，论文中通过实验发现人类头脑最好的状态能记忆含有7(±2)项信息块，在记忆了5-9项信息后人类的头脑就开始出错。

每个自然人都有天然局限性，我们每个人同时能处理的人际连接，信息块都是非常有限的。一个函数太长，处理的细节信息太多，会很容易看到后面忘了前面。

我们在拆分一个事务的时候，最常见的动机就是**复杂**。

笔者曾经就职和现在就职的公司都有要求过一个函数和一个类的代码行数不能超过XX行。以至于，当有人提交了一个超长的函数或者超大的类，都会要求整改。

很多人会直接把复杂度和模块，函数或类的代码行数挂钩，超过多少行就拆。这种理解虽然不对，但确实在大部分情况下都非常有效。

当然，我并不是建议让大家把函数或类拆的越小越好。

函数超过一定行数，我们只需要对其保持更高的警觉即可，如果确实需要拆就拆，如果不需要拆，也不用多此一举。比如这个函数：
```
public static Object toJSON(Object javaObject, SerializeConfig config) {
    if (javaObject == null) {
        return null;
    }

    if (javaObject instanceof JSON) {
        return javaObject;
    }

    if (javaObject instanceof Map) {
        Map<Object, Object> map = (Map<Object, Object>) javaObject;

        int size = map.size();

        Map innerMap;
        if (map instanceof LinkedHashMap) {
            innerMap = new LinkedHashMap(size);
        } else if (map instanceof TreeMap) {
            innerMap = new TreeMap();
        } else {
            innerMap = new HashMap(size);
        }

        JSONObject json = new JSONObject(innerMap);

        for (Map.Entry<Object, Object> entry : map.entrySet()) {
            Object key = entry.getKey();
            String jsonKey = TypeUtils.castToString(key);
            Object jsonValue = toJSON(entry.getValue(), config);
            json.put(jsonKey, jsonValue);
        }

        return json;
    }

    if (javaObject instanceof Collection) {
        Collection<Object> collection = (Collection<Object>) javaObject;

        JSONArray array = new JSONArray(collection.size());

        for (Object item : collection) {
            Object jsonValue = toJSON(item, config);
            array.add(jsonValue);
        }

        return array;
    }

    if (javaObject instanceof JSONSerializable) {
        String json = JSON.toJSONString(javaObject);
        return JSON.parse(json);
    }

    Class<?> clazz = javaObject.getClass();

    if (clazz.isEnum()) {
        return ((Enum<?>) javaObject).name();
    }

    if (clazz.isArray()) {
        int len = Array.getLength(javaObject);

        JSONArray array = new JSONArray(len);

        for (int i = 0; i < len; ++i) {
            Object item = Array.get(javaObject, i);
            Object jsonValue = toJSON(item);
            array.add(jsonValue);
        }

        return array;
    }

    if (ParserConfig.isPrimitive2(clazz)) {
        return javaObject;
    }

    ObjectSerializer serializer = config.getObjectWriter(clazz);
    if (serializer instanceof JavaBeanSerializer) {
        JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) serializer;

        JSONObject json = new JSONObject();
        try {
            Map<String, Object> values = javaBeanSerializer.getFieldValuesMap(javaObject);
            for (Map.Entry<String, Object> entry : values.entrySet()) {
                json.put(entry.getKey(), toJSON(entry.getValue(), config));
            }
        } catch (Exception e) {
            throw new JSONException("toJSON error", e);
        }
        return json;
    }

    String text = JSON.toJSONString(javaObject);
    return JSON.parse(text);
}
```

这是fastjson将一个对象转成JSON方法的源代码，将近一百行左右。整个函数只做了一件事，把一个java对象转成JSON对象。当然，我们也可以把这个函数拆的更细，比如把map转JSON，list转JSON，数组转JSON抽成一些更小的子函数；
我不反对这种拆的更细的方式，但我也不认为这种拆的更细的写法比当前不拆分的写法更优。原因如下：
- 这个函数自始至终都只在做一件非常聚焦的事；
- 它行数虽多，但是代码前后的相关性极强，整体看起来也并不复杂；
- 如果将各个if块抽成各个函数，这些子函数并没有其他人共用，反而在阅读函数时会变得困难，我们需要在各个子函数间多次跳转。

> 将函数分的过小，除了上面提到的增加阅读跳转次数外，还有一个非常重要的开销：命名。一个函数最为重要的部分就是命名，给一个拆出去的函数随便命名，比不拆带来的影响更为恶劣。函数如果拆的太细，往往需要花费我们大量时间斟酌函数名，尤其对于英语不好的程序员来说，会花费更多的时间，甚至经常花了时间想出来的名字仍然大有歧义。


#### 2. 复用
当然除了复杂性的考虑外，我们拆分模块、类或函数时还有一个非常重要的维度：**共用**。

比如下面这个函数，给服务器新增一个IP，逻辑其实很简单，就是先校验然后执行一条命令就结束了。
```
public boolean addIP(IPInfo ipInfo) {
    // 校验IP信息
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }

    boolean isSuccess = CMDUtil.excuteCmd(SET_IP_CMD).isSuccess();
    return isSuccess;
}
```
这个函数本身没有问题，但是后面需要增加一个更新IP信息的功能：
```
public boolean updateIP(IPInfo ipInfo) {
    // 校验IP信息
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }

    // some other code.
    return true;
}
```
我们发现，更新IP的新增IP的校验逻辑完全一模一样。这时addIP和updateIP就都需要拆分了，他们需要把校验的逻辑拆解出来进行共用：
```
public boolean addIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP(ipInfo);

    boolean isSuccess = CMDUtil.excuteCmd(SET_IP_CMD).isSuccess();
    return isSuccess;
}

public boolean updateIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP(ipInfo);

    // some other code.
    return true;
}

private static void checkIP(IPInfo ipInfo) {
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }
}
```

这个例子比较简单，只是一个基本的拆解共用。后面我会用一个单独的章节《参数化与反参数化》专门对这一手段进行说明。


### 总结

我们一般会在以下三种情况下拆分函数或类。
1. 变化因子：将有多个变化因子的函数或类拆分开，以期内部发生变化时互不影响；
2. 当前模块，类或函数规模过于庞大和复杂，难以理解；
3. 仅仅是单纯的想共用一些代码片段；

当变化因子不太明确，复杂度还不算太高，而且中间也不包含可共用的部分时，我们并没有必要为了拆分而去拆分一个函数或类；当后续发生变化后如果需要拆解时再来拆解，并不会带来太多额外工作量。当然，如果我们能提前预知到这些变化，当然最好。

> 复杂是一个主观的感受。写代码的人往往会因为对代码和业务更为熟悉会觉得相对简单很多，而对于后期的代码维护人员来说感觉又不一样，理解别人的代码都相对会困难一些。所以在我们考虑一个类或函数是否复杂的时候，应**尽量站在代码阅读者（维护者）的角度进行思考**。

本章更多的讲的是“**一**”和“**变化因子**”的概念，至于如何找到**变化因子**，再如何根据**变化因子**分解成一个一个合理的“**一**”却描述不多，我相信即使我再列举更多的例子也无法说明这个拆解过程，这个拆解的过程有一个非常响亮的名称——**抽象**。

之所以单一职责原则很难理解，正是因为抽象难于理解。





