### 1. 原始场景和代码
先给个很简单的类吧：
```
public class API {
	public void method1() {
		// ...
	}

	public void method2() {
		// ...
	}
	
	public void method3() {
		// ...
	}
	
	// ...
}
```


### 2. 演变过程
需求一：**现在有个长官，他现在让我执行method2，再执行method3**
于是，我提供了一个函数给这个长官下达命令:
```
// api对象的定义
private API api = new API();

// 提供给长官的函数
public void callMe() {
	api.method1();
	api.method2();
}

```

很轻松的完成。

需求二：**长官会随时下达命令，而且我完全不知道他可能会叫我执行什么，反正下达一条命令，执行一个方法。**
面对这种需求，要么罢工，让长官自己直接调用API方法，想调什么自己选。
而实际情况是，长官很可能跟我们一样可怜，他也只是在传达别人下发的命令，他一样会面临我们一样的问题。
对于实际项目而言，长官可能只是一个前端接口，他的上面还有一个超级管理员在界面上一顿操作，谁也不知道他会点哪个按钮，后台代码总有一个地方要响应这些请求。

所以最终还是得我们自己想办法。
用拍脑袋最简单的方式，我们可以给所有的method编号：1代表method1、2代表method2、3代表method3...；依次类推。我们也给每个按钮编号，点哪个按钮就传按钮的编号过来即可。
这样设计后，代码就可以改成：
```
// api对象的定义
private API api = new API();

// 提供给长官的函数
public void callMe(int no) {
	if (no == 1) {
		api.method1();
	} else if (no == 2) {
		api.method2();
	} else if (...) {
	}
	...
}

```

### 3. 思路扩展
1. 命令模式的本质
命令模式的本质是将一个对行为进行抽象的过程。如果一门语言直接支持将函数作为对象，是不会有命令模式的用武之地的。
命令模式使用到的方式是一个基本的BA转换，特殊的是，在命令模式中，B是一个函数，而且有很多不同实现。
在类似于java的编程语言中，由于语法上的限制，必须将函数上升到类的层次才能进行抽象。

早在代理模式一章中的“顶级抽象”中，我们其实已经详细描述过如果抽象函数，其实已经就有命令模式的代码雏形了。

2. 
很多著名的网站或大牛在介绍命令模式时，其实没有太讲清楚命令模式的核心。一般演变到需求二的时候，命令模式就出来了；有些甚至直接甩出一堆代码，只说这样扩展性更好。
设计模式往往会导致代码量增多，而且也因为中间层的增加导致项目的理解难度变大，真的没有必要因为设计模式的高大上就到处面向接口编程。
我们其实可以尝试一下，在没有需求三，需求四的情况下，使用命令模式会是什么样的情况：
```
// api对象的定义
private API api = new API();

// 提供给长官的函数
public void callMe(Command command) {
	command.call();
}

public interface Command {
	void action();
}

public class Command1 implements Command {
	private API api;
	
	@Override
	public void action() {
		api.method1();
	}
}

public class Command2 implements Command {
	private API api;
	
	@Override
	public void action() {
		api.method2();
	}
}

public class Command3 implements Command {
	private API api;
	
	@Override
	public void action() {
		api.method3();
	}
}

```
可是长官该如何拿到Command呢，前端按钮只给了它传了编号。所以这段代码我们得写，放在哪里先不管：
```
private static final Map<Integer, Command> commandMap = new HashMap<>();
static {
	commandMap.put(1, new Command1());
	commandMap.put(2, new Command2());
	commandMap.put(3, new Command3());
	...
}

public static Command getCommand(int no) {
	return commandMap.get(no);
}

```
而且既然长官都能自己拿到Command了，也没有必要调用callMe函数多此一举了：
```
public class Sir {
	/**
	 * 管理员按下按钮
	 */
	public void putBtn(int no) {
		Command command = getCommand(no);
		// callMe(command) 多此一举，删除;
		command.action();
	}
}
```

BA转换，主要是为了避免B的变更对A的影响，此时Sir既是A也是client角色，它依赖API的method天经地义，他并不需要我们帮助它隔离API类对它的影响。
试想，现在要增加Command4。两种方式都得在API类中增加一个method4，前者需要在callMe函数中增加一个if分支，后者需要增加一个Command类，再在commandMap增加一个元素。


